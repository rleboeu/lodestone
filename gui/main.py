# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lodestone.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import requests
import sys
import json
import re
import os
import csv

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 600))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnGenerateSheet = QtWidgets.QPushButton(self.centralwidget)
        self.btnGenerateSheet.setGeometry(QtCore.QRect(20, 440, 191, 41))
        self.btnGenerateSheet.clicked.connect(lambda: self.generateSpreadsheets())

        self.lblProgress = QtWidgets.QLabel(self.centralwidget)
        self.lblProgress.setGeometry(QtCore.QRect(220, 440, 131, 41))

        font = QtGui.QFont()
        font.setPointSize(11)
        self.btnGenerateSheet.setFont(font)
        self.btnGenerateSheet.setObjectName("btnGenerateSheet")
        self.cmbDemoRace = QtWidgets.QComboBox(self.centralwidget)
        self.cmbDemoRace.setGeometry(QtCore.QRect(130, 230, 131, 22))
        self.cmbDemoRace.setObjectName("cmbDemoRace")
        self.cmbDemoRace.addItem("")
        self.cmbDemoRace.addItem("")
        self.lblTitle = QtWidgets.QLabel(self.centralwidget)
        self.lblTitle.setGeometry(QtCore.QRect(30, 30, 341, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTitle.setFont(font)
        self.lblTitle.setObjectName("lblTitle")
        self.lblDemographic = QtWidgets.QLabel(self.centralwidget)
        self.lblDemographic.setGeometry(QtCore.QRect(30, 200, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lblDemographic.setFont(font)
        self.lblDemographic.setObjectName("lblDemographic")
        self.lblDemoRace = QtWidgets.QLabel(self.centralwidget)
        self.lblDemoRace.setGeometry(QtCore.QRect(30, 230, 65, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lblDemoRace.setFont(font)
        self.lblDemoRace.setObjectName("lblDemoRace")
        self.cmbDemoGender = QtWidgets.QComboBox(self.centralwidget)
        self.cmbDemoGender.setGeometry(QtCore.QRect(130, 260, 131, 22))
        self.cmbDemoGender.setObjectName("cmbDemoGender")
        self.cmbDemoGender.addItem("")
        self.cmbDemoGender.addItem("")
        self.cmbDemoGender.addItem("")
        self.lblDemoGender = QtWidgets.QLabel(self.centralwidget)
        self.lblDemoGender.setGeometry(QtCore.QRect(30, 260, 65, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lblDemoGender.setFont(font)
        self.lblDemoGender.setObjectName("lblDemoGender")
        self.lblProject = QtWidgets.QLabel(self.centralwidget)
        self.lblProject.setGeometry(QtCore.QRect(30, 100, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lblProject.setFont(font)
        self.lblProject.setObjectName("lblProject")
        self.lblProjectName = QtWidgets.QLabel(self.centralwidget)
        self.lblProjectName.setGeometry(QtCore.QRect(30, 130, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lblProjectName.setFont(font)
        self.lblProjectName.setObjectName("lblProjectName")
        self.cmbProjectName = QtWidgets.QComboBox(self.centralwidget)
        self.cmbProjectName.setEnabled(False)
        self.cmbProjectName.setGeometry(QtCore.QRect(180, 130, 131, 22))
        self.cmbProjectName.setObjectName("cmbProjectName")
        self.cmbProjectName.addItem("")
        self.lblDiagnoses = QtWidgets.QLabel(self.centralwidget)
        self.lblDiagnoses.setGeometry(QtCore.QRect(30, 300, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lblDiagnoses.setFont(font)
        self.lblDiagnoses.setObjectName("lblDiagnoses")
        self.lblDiagnosesPathStage = QtWidgets.QLabel(self.centralwidget)
        self.lblDiagnosesPathStage.setGeometry(QtCore.QRect(30, 330, 201, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lblDiagnosesPathStage.setFont(font)
        self.lblDiagnosesPathStage.setObjectName("lblDiagnosesPathStage")
        self.cmbDiagnosesPathStage = QtWidgets.QComboBox(self.centralwidget)
        self.cmbDiagnosesPathStage.setGeometry(QtCore.QRect(250, 330, 131, 22))
        self.cmbDiagnosesPathStage.setObjectName("cmbDiagnosesPathStage")
        self.cmbDiagnosesPathStage.addItem("")
        self.cmbDiagnosesPathStage.addItem("")
        self.cmbDiagnosesPathStage.addItem("")
        self.cmbDiagnosesPathStage.addItem("")
        self.cmbDiagnosesPathStage.addItem("")
        self.btnDownloadFiles = QtWidgets.QPushButton(self.centralwidget)
        self.btnDownloadFiles.setEnabled(False)
        self.btnDownloadFiles.setGeometry(QtCore.QRect(20, 490, 191, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.btnDownloadFiles.setFont(font)
        self.btnDownloadFiles.setObjectName("btnDownloadFiles")
        self.chkDownloadSort = QtWidgets.QCheckBox(self.centralwidget)
        self.chkDownloadSort.setEnabled(False)
        self.chkDownloadSort.setGeometry(QtCore.QRect(230, 490, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.chkDownloadSort.setFont(font)
        self.chkDownloadSort.setObjectName("chkDownloadSort")
        self.lblProjectPrimarySite = QtWidgets.QLabel(self.centralwidget)
        self.lblProjectPrimarySite.setGeometry(QtCore.QRect(30, 160, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lblProjectPrimarySite.setFont(font)
        self.lblProjectPrimarySite.setObjectName("lblProjectPrimarySite")
        self.cmbProjectPrimarySite = QtWidgets.QComboBox(self.centralwidget)
        self.cmbProjectPrimarySite.setEnabled(True)
        self.cmbProjectPrimarySite.setGeometry(QtCore.QRect(180, 160, 131, 22))
        self.cmbProjectPrimarySite.setObjectName("cmbProjectPrimarySite")
        self.cmbProjectPrimarySite.addItem("")
        self.cmbProjectPrimarySite.addItem("")
        self.cmbProjectPrimarySite.addItem("")
        self.cmbProjectPrimarySite.addItem("")
        self.cmbProjectPrimarySite.addItem("")

        self.model = QtGui.QStandardItemModel()

        self.tableViewMain = QtWidgets.QTableView(self.centralwidget)
        self.tableViewMain.setGeometry(QtCore.QRect(450, 20, 800, 531))
        self.tableViewMain.setObjectName("tableViewMain")
        self.tableViewMain.setModel(self.model)
        self.tableViewMain.horizontalHeader().setStretchLastSection(True)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 19))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.cmbProjectName, self.cmbDemoRace)
        MainWindow.setTabOrder(self.cmbDemoRace, self.cmbDemoGender)
        MainWindow.setTabOrder(self.cmbDemoGender, self.cmbDiagnosesPathStage)
        MainWindow.setTabOrder(self.cmbDiagnosesPathStage, self.btnGenerateSheet)
        MainWindow.setTabOrder(self.btnGenerateSheet, self.chkDownloadSort)
        MainWindow.setTabOrder(self.chkDownloadSort, self.btnDownloadFiles)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Lodestone"))
        self.btnGenerateSheet.setText(_translate("MainWindow", "Search..."))
        self.cmbDemoRace.setItemText(0, _translate("MainWindow", "white"))
        self.cmbDemoRace.setItemText(1, _translate("MainWindow", "black"))
        self.lblTitle.setText(_translate("MainWindow", "Welcome to Lodestone (Alpha)"))
        self.lblDemographic.setText(_translate("MainWindow", "Demographics"))
        self.lblDemoRace.setText(_translate("MainWindow", "Race:"))
        self.cmbDemoGender.setItemText(0, _translate("MainWindow", "both"))
        self.cmbDemoGender.setItemText(1, _translate("MainWindow", "female"))
        self.cmbDemoGender.setItemText(2, _translate("MainWindow", "male"))
        self.lblDemoGender.setText(_translate("MainWindow", "Gender:"))
        self.lblProject.setText(_translate("MainWindow", "Project"))
        self.lblProjectName.setText(_translate("MainWindow", "Name:"))
        self.cmbProjectName.setItemText(0, _translate("MainWindow", "TCGA"))
        self.lblDiagnoses.setText(_translate("MainWindow", "Diagnoses"))
        self.lblDiagnosesPathStage.setText(_translate("MainWindow", "AJCC Pathologic Stage:"))
        self.cmbDiagnosesPathStage.setItemText(0, _translate("MainWindow", "stage i"))
        self.cmbDiagnosesPathStage.setItemText(1, _translate("MainWindow", "stage ia"))
        self.cmbDiagnosesPathStage.setItemText(2, _translate("MainWindow", "stage iia"))
        self.cmbDiagnosesPathStage.setItemText(3, _translate("MainWindow", "stage iib"))
        self.cmbDiagnosesPathStage.setItemText(4, _translate("MainWindow", "stage iiia"))
        self.btnDownloadFiles.setText(_translate("MainWindow", "Download SVS Files"))
        self.chkDownloadSort.setText(_translate("MainWindow", "Sort Images by Case ID"))
        self.lblProjectPrimarySite.setText(_translate("MainWindow", "Primary Site:"))
        self.cmbProjectPrimarySite.setItemText(0, _translate("MainWindow", "breast"))
        self.cmbProjectPrimarySite.setItemText(1, _translate("MainWindow", "brain"))
        self.cmbProjectPrimarySite.setItemText(2, _translate("MainWindow", "bronchus and lung"))
        self.cmbProjectPrimarySite.setItemText(3, _translate("MainWindow", "kidney"))
        self.cmbProjectPrimarySite.setItemText(4, _translate("MainWindow", "ovary"))

    def generateSpreadsheets(self):
        self.btnGenerateSheet.setEnabled(False)
        self.model.removeRows(0, self.model.rowCount())

        fields = [
            "diagnoses.ajcc_pathologic_stage",
            "samples.sample_type",
            "project.project_id",
            "demographic.gender",
            "demographic.race",
            "submitter_id"
            ]
        fields = ",".join(fields)

        files_endpt = "https://api.gdc.cancer.gov/cases"

        primary_site = [ self.cmbProjectPrimarySite.currentText() ]
        demographic_race = [ self.cmbDemoRace.currentText() ]

        demographic_gender = [ self.cmbDemoGender.currentText() ]
        if demographic_gender[0] == 'both':
            demographic_gender = ["male", "female"]

        ajcc_path_stage = [ self.cmbDiagnosesPathStage.currentText() ]
        program_name = [ self.cmbProjectName.currentText() ]

        filters = {
            "op": "and",
            "content":[
                {
                "op": "in",
                "content":{
                    "field": "primary_site",
                    "value": primary_site
                    }
                },
                {
                "op": "in",
                "content":{
                    "field": "demographic.race",
                    "value": demographic_race
                    }
                },
                {
                    "op": "in",
                    "content": {
                        "field": "diagnoses.ajcc_pathologic_stage",
                        "value": ajcc_path_stage
                    }
                },
                {
                    "op": "in",
                    "content": {
                        "field": "project.program.name",
                        "value": program_name
                    }
                },
                {
                    "op": "in",
                    "content": {
                        "field": "demographic.gender",
                        "value": demographic_gender
                    }
                }
            ]
        }

        params = {
            "filters": filters,
            "fields": fields,
            "format": "TSV",
            "size": "2000"
            }

        response = requests.post(files_endpt, headers = {"Content-Type": "application/json"}, json = params)

        original_stdout = sys.stdout

        with open('searchResults.tsv', 'w') as f:
            sys.stdout = f
            print(response.content.decode("utf-8"))
            sys.stdout = original_stdout

        # determine columns
        case_id = 10
        gender = 0
        race = 1
        stage = 2
        upbound = case_id

        if ajcc_path_stage[0] == 'stage i' or ajcc_path_stage[0] == 'stage iiia':
            case_id = 9
            upbound = case_id

        count = 0
        lines = []

        with open('searchResults.tsv') as fp:
            with open('CASE_SET.tsv', 'w') as fout:
                sys.stdout = fout
                while True:
                    count += 1

                    line = fp.readline()

                    if not line:
                        break

                    lines = line.strip().split("\t")

                    if count == 1:
                        print("Case ID\tGender\tRace\tAJCC Pathologic Stage\tNo. of Images")
                    elif len(line) != 1:
                        num_samples = 0
                        for i in range(5, upbound):
                            if lines[i] != '':
                                num_samples += 1
                        print("{}\t{}\t{}\t{}\t{}".format(lines[case_id], lines[gender], lines[race], lines[stage], num_samples))
                sys.stdout = original_stdout
        self.btnGenerateSheet.setEnabled(True)
        self.btnDownloadFiles.setEnabled(True)


        count = 0
        with open('CASE_SET.tsv') as tsvfile:
            reader = csv.DictReader(tsvfile, dialect='excel-tab')
            for row in reader:
                print(row)
                items = []
                for key in row.keys():
                    items.append(QtGui.QStandardItem(row[key]))
                '''items = [
                    QtGui.QStandardItem(field)
                    for field in row
                ]'''
                if count == 0:
                    headers = []
                    for i in row.keys():
                        headers.append(QtGui.QStandardItem(i))
                    self.model.appendRow(headers)

                self.model.appendRow(items)
                count += 1





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
